spring.application.name=communication
server.port=8081

spring.datasource.url=jdbc:mysql://localhost:3306/communication
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update

spring.kafka.bootstrap-servers=localhost:9092


                                   #CONSUMER DETAILS
#Consumer group-id(all instances share load)
spring.kafka.consumer.group-id=communication-service
#Start from the earliest offset if no commit exists
spring.kafka.consumer.auto-offset-reset=latest

#Key deserializer: string
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer

#catch errors safely
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
#JsonDeserializer ? actually parses JSON
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
#allow which classes can be deserialized.
spring.kafka.consumer.properties.spring.json.trusted.packages=com.communication.communication.dto
#tell it which class to map JSON to (TestDTO).
#spring.kafka.consumer.properties.spring.json.value.default.type=com.communication.communication.dto.TestDTO
spring.kafka.admin.fail-fast=true



                                    #PRODUCER DETAILS#
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.acks=all
spring.kafka.producer.retries=10
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.properties.delivery.timeout.ms=120000
